    //MARK: - Functions

    func fetchData() {
        guard !didCompleteFetch else { return }
        guard let account = App.account else { return }

        let startOfFetch = Date()
        
        var promises: [Promise<Void>] = []
        promises.append(ActorService.fetchUserSettings(account: account))
        promises.append(ActorService.fetchOrgTypes())
        promises.append(ActorService.fetchOrgTreeAndSettings())
        promises.append(PCRUDService.fetchCodedValueMaps())
        promises.append(PCRUDService.fetchSMSCarriers())
        promises.append(fetchPartsData(account: account))
        print("xxx \(promises.count) promises made")

        centerSubview(activityIndicator)
        self.activityIndicator.startAnimating()
        
        firstly {
            when(fulfilled: promises)
        }.done {
            print("xxx \(promises.count) promises fulfilled")
            let elapsed = -startOfFetch.timeIntervalSinceNow
            os_log("fetch.elapsed: %.3f (%", log: Gateway.log, type: .info, elapsed, Gateway.addElapsed(elapsed))
            self.didCompleteFetch = true
            self.onDataLoaded()
        }.ensure {
            self.activityIndicator.stopAnimating()
        }.catch { error in
            self.presentGatewayAlert(forError: error)
        }
    }

    func fetchPartsData(account: Account) -> Promise<Void> {
        if !App.config.enablePartHolds || isEditHold {
            return Promise<Void>()
        }
        print("PlaceHold: \(record.title): fetching parts")
        let promise = SearchService.fetchHoldParts(recordID: record.id).then { (parts: [OSRFObject]) -> Promise<(GatewayResponse)> in
            self.parts = parts
            if self.hasParts,
                App.config.enableTitleHoldOnItemWithParts,
                let authtoken = account.authtoken,
                let userID = account.userID,
                let pickupOrgID = account.pickupOrgID
            {
                print("PlaceHold: \(self.record.title): checking titleHoldIsPossible")
                return CircService.titleHoldIsPossible(authtoken: authtoken, userID: userID, targetID: self.record.id, pickupOrgID: pickupOrgID)
            } else {
                return ServiceUtils.makeEmptyGatewayResponsePromise()
            }
        }.done { resp in
            self.titleHoldIsPossible = !resp.failed
            print("PlaceHold: \(self.record.title): titleHoldIsPossible=\(Utils.toString(self.titleHoldIsPossible))")
        }
        return promise
    }
    
    func toInt(_ str: String?) -> Int? {
        if let s = str {
            return Int(s)
        }
        return nil
    }

    // init that can't happen until fetchData completes
    func onDataLoaded() {
        loadNotifyData()
        loadPartData()
        loadOrgData()
        loadCarrierData()
        loadExpirationData()
        enableNodesWhenReady()
    }
    
    func loadNotifyData() {
        if let val = Utils.coalesce(holdRecord?.hasEmailNotify,
                                    App.account?.defaultNotifyEmail) {
            emailSwitch.switchView?.isOn = val
        }

        // Allow phone_notify to be set even if UX is not visible
        let phoneNumber = Utils.coalesce(holdRecord?.phoneNotify,
                                         App.account?.notifyPhone,
                                         App.valet.string(forKey: "PhoneNumber"))
        phoneNode.textField?.text = phoneNumber
        if let val = Utils.coalesce(holdRecord?.hasPhoneNotify,
                                    App.account?.defaultNotifyPhone),
            let str = phoneNumber,
            !str.isEmpty
        {
            phoneSwitch.switchView?.isOn = val
        }

        let smsNumber = Utils.coalesce(holdRecord?.smsNotify,
                                       App.account?.smsNotify,
                                       App.valet.string(forKey: "SMSNumber"))
        smsNode.textField?.text = smsNumber
        if let val = Utils.coalesce(holdRecord?.hasSmsNotify,
                                    App.account?.defaultNotifySMS),
            let str = smsNumber,
            !str.isEmpty
        {
            smsSwitch.switchView?.isOn = val
        }
    }

    func loadOrgData() {
        orgLabels = Organization.getSpinnerLabels()
        orgIsPickupLocation = Organization.getIsPickupLocation()
        orgIsPrimary = Organization.getIsPrimary()

        var selectOrgIndex = 0
        let defaultPickupLocation = Utils.coalesce(holdRecord?.pickupOrgId,
                                                   App.account?.pickupOrgID)
        for index in 0..<Organization.visibleOrgs.count {
            let org = Organization.visibleOrgs[index]
            if org.id == defaultPickupLocation {
                selectOrgIndex = index
            }
        }
        
        selectedOrgIndex = selectOrgIndex
        pickupNode.textField?.text = orgLabels[selectOrgIndex].trim()
        pickupNode.textField?.isUserInteractionEnabled = true
    }
    
    func loadCarrierData() {
        carrierLabels = SMSCarrier.getSpinnerLabels()
        carrierLabels.sort()
        carrierLabels.insert("---", at: 0)

        var selectCarrierName: String?
        var selectCarrierIndex = 0
        if let defaultCarrierID = Utils.coalesce(holdRecord?.smsCarrier,
                                                 App.account?.smsCarrier,
                                                 toInt(App.valet.string(forKey: "SMSCarrier"))),
            let defaultCarrier = SMSCarrier.find(byID: defaultCarrierID) {
            selectCarrierName = defaultCarrier.name
        }
        for index in 0..<carrierLabels.count {
            let carrier = carrierLabels[index]
            if carrier == selectCarrierName {
                selectCarrierIndex = index
            }
        }
        
        selectedCarrierName = carrierLabels[selectCarrierIndex]
        carrierNode.textField?.text = selectedCarrierName
        carrierNode.textField?.isUserInteractionEnabled = true
    }
    
    func loadPartData() {
        let sentinelString = partRequired ? "---" : "- \(R.getString("Any part")) -"
        partLabels = [sentinelString]
        for partObj in parts {
            if let label = partObj.getString("label"), let _ = partObj.getInt("id") {
                partLabels.append(label)
            }
        }

        selectedPartLabel = partLabels[0]
        partNode.textField?.text = selectedPartLabel
        partNode.textField?.isUserInteractionEnabled = true

        // NB: call transitionLayout on the scrollNode (not partNode, which is not
        // a subnode with Automatic Subnode Management)
        scrollNode.transitionLayout(withAnimation: true, shouldMeasureAsync: false)
    }

    func loadExpirationData() {
        if let val = holdRecord?.isSuspended {
            suspendSwitch.switchView?.isOn = val
        }
        if let date = holdRecord?.expireDate {
            updateExpirationDate(date)
        }
        if let date = holdRecord?.thawDate {
            updateThawDate(date)
        }
    }

    @objc func expirationChanged(sender: UIDatePicker) {
        updateExpirationDate(sender.date)
    }
    
    func updateExpirationDate(_ date: Date) {
        expirationDate = date
        setPickerDate(textNode: expirationNode, picker: expirationPickerNode, date: date)
    }
    
    @objc func thawChanged(sender: UIDatePicker) {
        updateThawDate(sender.date)
    }
    
    func updateThawDate(_ date: Date) {
        thawDate = date
        setPickerDate(textNode: thawNode, picker: thawPickerNode, date: date)
    }

    @objc func holdButtonPressed(sender: Any) {
        placeOrUpdateHold()
    }

    @objc func switchChanged(sender: Any) {
        enableNodesWhenReady()
    }

    func placeOrUpdateHold() {
        guard let authtoken = App.account?.authtoken,
            let userID = App.account?.userID else
        {
            self.presentGatewayAlert(forError: HemlockError.sessionExpired)
            return
        }
        let pickupOrg = Organization.visibleOrgs[selectedOrgIndex]
        if !pickupOrg.isPickupLocation {
            self.showAlert(title: "Not a pickup location", message: "You cannot pick up items at \(pickupOrg.name)")
            return
        }
        var holdType: String
        var targetID: Int
        let partID = parts.first(where: {$0.getString("label") == selectedPartLabel})?.getInt("id")
        if partRequired || partID != nil {
            holdType = API.holdTypePart
            guard let id = partID else {
                self.showAlert(title: "No part selected", message: "You must select a part before placing a hold on this item")
                return
            }
            targetID = id
        } else {
            holdType = API.holdTypeTitle
            targetID = record.id
        }
        
        var notifyPhoneNumber: String? = nil
        var notifySMSNumber: String? = nil
        var notifyCarrierID: Int? = nil
        if isOn(phoneSwitch) {
            guard let phoneNotify = phoneNode.textField?.text?.trim(), !phoneNotify.isEmpty else {
                self.showAlert(title: "Error", message: "Phone number field cannot be empty")
                return
            }
            notifyPhoneNumber = phoneNotify
            if App.config.enableHoldPhoneNotification {
                App.valet.set(string: phoneNotify, forKey: "PhoneNumber")
            }
        }
        if isOn(smsSwitch) {
            guard let smsNotify = smsNode.textField?.text?.trim(), !smsNotify.isEmpty else {
                self.showAlert(title: "Error", message: "SMS phone number field cannot be empty")
                return
            }
            guard let carrier = SMSCarrier.find(byName: self.selectedCarrierName) else {
                self.showAlert(title: "Error", message: "Please select a valid carrier")
                return
            }
            App.valet.set(string: String(carrier.id), forKey: "SMSCarrier")
            notifySMSNumber = smsNotify
            App.valet.set(string: smsNotify, forKey: "SMSNumber")
            notifyCarrierID = carrier.id
        }
        
        if let hold = holdRecord {
            doUpdateHold(authtoken: authtoken, holdRecord: hold, pickupOrg: pickupOrg, notifyPhoneNumber: notifyPhoneNumber, notifySMSNumber: notifySMSNumber, notifyCarrierID: notifyCarrierID)
        } else {
            doPlaceHold(authtoken: authtoken, userID: userID, holdType: holdType, targetID: targetID, pickupOrg: pickupOrg, notifyPhoneNumber: notifyPhoneNumber, notifySMSNumber: notifySMSNumber, notifyCarrierID: notifyCarrierID)
        }
    }

    func doPlaceHold(authtoken: String, userID: Int, holdType: String, targetID: Int, pickupOrg: Organization, notifyPhoneNumber: String?, notifySMSNumber: String?, notifyCarrierID: Int?) {
        centerSubview(activityIndicator)
        self.activityIndicator.startAnimating()
        
        let promise = CircService.placeHold(authtoken: authtoken, userID: userID, holdType: holdType, targetID: targetID, pickupOrgID: pickupOrg.id, notifyByEmail: isOn(emailSwitch), notifyPhoneNumber: notifyPhoneNumber, notifySMSNumber: notifySMSNumber, smsCarrierID: notifyCarrierID, expirationDate: expirationDate, useOverride: App.config.enableHoldUseOverride)
        promise.done { obj in
            if let _ = obj.getInt("result") {
                // case 1: result is an Int - hold successful
                self.valueChangedHandler?();
                self.navigationController?.view.makeToast("Hold successfully placed")
                self.navigationController?.popViewController(animated: true)
                return
            } else if let resultObj = obj.getAny("result") as? OSRFObject,
                let eventObj = resultObj.getAny("last_event") as? OSRFObject
            {
                // case 2: result is an object with last_event - hold failed
                throw self.makeHoldError(fromEventObj: eventObj)
            } else if let resultArray = obj.getAny("result") as? [OSRFObject],
                let eventObj = resultArray.first
            {
                // case 3: result is an array of ilsevent objects - hold failed
                throw self.makeHoldError(fromEventObj: eventObj)
            } else {
                throw HemlockError.unexpectedNetworkResponse(String(describing: obj.dict))
            }
        }.ensure {
            self.activityIndicator.stopAnimating()
        }.catch { error in
            self.presentGatewayAlert(forError: error)
        }
    }

    func doUpdateHold(authtoken: String, holdRecord: HoldRecord, pickupOrg: Organization, notifyPhoneNumber: String?, notifySMSNumber: String?, notifyCarrierID: Int?) {
        centerSubview(activityIndicator)
        self.activityIndicator.startAnimating()

        let promise = CircService.updateHold(authtoken: authtoken, holdRecord: holdRecord, pickupOrgID: pickupOrg.id, notifyByEmail: isOn(emailSwitch), notifyPhoneNumber: notifyPhoneNumber, notifySMSNumber: notifySMSNumber, smsCarrierID: notifyCarrierID, expirationDate: expirationDate, suspendHold: isOn(suspendSwitch), thawDate: thawDate)
        promise.done { resp in
            if let _ = resp.str {
                // case 1: result is String - update successful
                self.valueChangedHandler?();
                self.navigationController?.view.makeToast("Hold successfully updated")
                self.navigationController?.popViewController(animated: true)
                return
            } else if let err = resp.error {
                throw err
            } else {
                throw HemlockError.serverError("expected string, received \(resp.description)")
            }
        }.ensure {
            self.activityIndicator.stopAnimating()
        }.catch { error in
            self.presentGatewayAlert(forError: error)
        }
    }
    
    func makeHoldError(fromEventObj obj: OSRFObject) -> Error {
        if let ilsevent = obj.getInt("ilsevent"),
            let textcode = obj.getString("textcode"),
            let desc = obj.getString("desc")
        {
            let failpart = obj.getObject("payload")?.getString("fail_part")
            return GatewayError.event(ilsevent: ilsevent, textcode: textcode, desc: desc, failpart: failpart)
        }
        return HemlockError.unexpectedNetworkResponse(String(describing: obj))
    }

    func isOn(_ node: ASDisplayNode) -> Bool {
        if let switchView = node.switchView, switchView.isOn == true {
            return true
        } else {
            return false
        }
    }

    func makeRowSpec(rowMinHeight: ASDimension, spacing: CGFloat) -> ASStackLayoutSpec {
        let rowSpec = ASStackLayoutSpec.horizontal()
        rowSpec.alignItems = .center
        rowSpec.spacing = spacing
        rowSpec.style.minHeight = rowMinHeight
        return rowSpec
    }
    
    func makeVC(title: String, options: [String], selectedOption: String) -> OptionsViewController? {
        guard let vc = UIStoryboard(name: "Options", bundle: nil).instantiateInitialViewController() as? OptionsViewController else { return nil }
        vc.title = title
        vc.optionLabels = options
        vc.selectedLabel = selectedOption
        return vc
    }
    
    func makeVC(title: String, options: [String], selectedIndex: Int) -> OptionsViewController? {
        guard let vc = UIStoryboard(name: "Options", bundle: nil).instantiateInitialViewController() as? OptionsViewController else { return nil }
        vc.title = title
        vc.optionLabels = options
        vc.selectedPath = IndexPath(row: selectedIndex, section: 0)
        return vc
    }

    func scrollToEnd() {
        let sv = self.scrollNode.view
//        print("sv.contentSize.height = \(sv.contentSize.height)")
//        print("sv.bounds.size.height = \(sv.bounds.size.height)")
//        print("sv.contentInset.bottom = \(sv.contentInset.bottom)")
//        print("sv.frame.size.height = \(sv.frame.size.height)")
        let bottomOffset = CGPoint(x: 0, y: sv.contentSize.height - sv.bounds.size.height + sv.contentInset.bottom)
//        print("sv.... -> bottomOffset = \(bottomOffset)")
        sv.setContentOffset(bottomOffset, animated: true)
    }
}

//MARK: - UITextFieldDelegate
extension XPlaceHoldViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        switch textField {
        case pickupNode.textField:
            guard let vc = makeVC(title: "Pickup Location", options: orgLabels, selectedIndex: selectedOrgIndex) else { return true }
            vc.selectionChangedHandler = { index, trimmedLabel in
                self.selectedOrgIndex = index
                self.pickupNode.textField?.text = trimmedLabel
            }
            vc.optionIsEnabled = self.orgIsPickupLocation
            vc.optionIsPrimary = self.orgIsPrimary
            self.navigationController?.pushViewController(vc, animated: true)
            return false
        case carrierNode.textField:
            guard let vc = makeVC(title: "SMS Carrier", options: carrierLabels, selectedOption: selectedCarrierName) else { return true }
            vc.selectionChangedHandler = { index, trimmedLabel in
                self.selectedCarrierName = trimmedLabel
                self.carrierNode.textField?.text = trimmedLabel
            }
            self.navigationController?.pushViewController(vc, animated: true)
            return false
        case partNode.textField:
            guard let vc = makeVC(title: "Select a part", options: partLabels, selectedOption: selectedPartLabel) else { return true }
            vc.selectionChangedHandler = { index, trimmedLabel in
                self.selectedPartLabel = trimmedLabel
                self.partNode.textField?.text = trimmedLabel
            }
            self.navigationController?.pushViewController(vc, animated: true)
            return false
        case expirationNode.textField:
            expirationPickerVisible = !expirationPickerVisible
            if expirationPickerVisible { thawPickerVisible = false }
            self.scrollNode.transitionLayout(withAnimation: true, shouldMeasureAsync: true) {
                guard self.expirationPickerVisible else { return }
                // This is a Good Enough workaround for the fact that on a small screen, transitioning
                // the date picker into view can move the Place Hold button off screen.  This scrolls
                // slightly too high, but it brings the Place Hold button back on screen.  Doing a
                // scrollToEnd() without the delay does not work, because the scrollView.bounds.size.height is
                // not settled yet.  After a short delay it is closer but still not correct.
                firstly {
                    return after(seconds: 0.1)
                }.done {
                    self.scrollToEnd()
                }
            }
            return false
        case thawNode.textField:
            thawPickerVisible = !thawPickerVisible
            if thawPickerVisible { expirationPickerVisible = false }
            self.scrollNode.transitionLayout(withAnimation: true, shouldMeasureAsync: true) {
                guard self.thawPickerVisible else { return }
                firstly {
                    return after(seconds: 0.1)
                }.done {
                    self.scrollToEnd()
                }
            }
            return false
        default:
            return true
        }
    }
}
